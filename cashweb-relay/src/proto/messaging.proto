syntax = "proto3";
package messaging;

// Basic key/value used to store header data.
message Header {
  string name = 1;
  string value = 2;
}

// Entry is an indidual piece of structured data.
message Entry {
  // Type informs the wallet what to do with this payload.
  string kind = 1;
  // The headers provide some extra metadata about the field that
  // may be relevant to the wallet.  At this time there are no meaningful
  // headers.
  repeated Header headers = 2;
  // Body of the metadata field.
  bytes entry_data = 3;
}

// Payload is the user-specified data section of a AddressMetadata that is
// encrypted by the shared secret.
message Payload {
  // The encrypted entries.
  repeated Entry entries = 1;
  // Possibly other stuff relevant to the whole message later
}

// A stamp transaction paired with a list of vouts identifying to stamp outputs.
message StampOutpoints {
  bytes stamp_tx = 1;
  repeated uint32 vouts = 2;
}

message StampData {
  enum StampType {
    None = 0;
    // Hash commitment means the stamp is being sent to the address specified by
    // public keys of the xpub defined by:
    // PublicKey: dP + SHA256(ciphertext)P
    // ChainCode: SHA256(ciphertext)
    MessageCommitment = 1;
  }
  StampType stamp_type = 1;
  // A collection of stamp outpoints.
  repeated StampOutpoints stamp_outpoints = 2;
}

// The message type transmitted in the cashweb protocol.
message Message {
  // The senders serialized pubkey.
  bytes source_pub_key = 1;
  // The receivers serialized pubkey.
  bytes destination_pub_key = 2;
  // Untrusted timestamp provided by sender. Covered by HMAC
  int64 timestamp = 3;
  // Maleable server time. This field is optional
  int64 received_time = 4;
  // Standard schemes for generating encryption key.
  // The SHA-256 digest of the payload. This is independent of the MAC
  // as only the sender/receiver can verify MAC. The relay server may set this
  // field if it strips the ciphertext from the message it sends to the
  // client over websockets. In which case the ciphertext would be available
  // over the payloads API.
  bytes payload_digest = 5;
  // Information about the stamp transactions
  StampData stamp_data = 6;
  enum EncryptionScheme {
    // None indicates the message is plaintext.
    None = 0;
    // For EphemeralDH, ECDH is used to generate a shared secret based on the
    // combination of the source and destination pubkeys. ECDH combination of
    // the source and destination keys. Shared secret is S = H(ser(abG)) where
    // ser() specifies serialization of the point. Payload is encrypted with
    // AES256.
    EphemeralDH = 1;
  }
  EncryptionScheme scheme = 7;
  // This salt is added to the HMAC to provide a shared source of entropy
  // (e.g. the Chaincode for stamp outputs: HASH256(chaincode))
  // but also to provide the sender a way to add a commitment to any additional
  // data they may want to prove they had later.
  // One such example would be a commitment to their private key, so that
  // they can prove they sent the message. (Since we are not using signatures
  // anyone could swap dest/source addresses and claim the messages was received
  // instead of sent.) This may be important since some wallets may want to
  // increment internal state with each message they send -- and this provides a
  // way to do so that is strong against forgery.
  bytes salt = 9;
  // The HMAC of the payload using the shared key.
  // Value = HMAC_SHA256(salt, HMAC_SHA256(timestamp, HMAC_SHA256(ser(sdP),
  // payload digest)))
  bytes payload_hmac = 10;
  // Optional size, which may be set by the relay server. This enables the
  // client to deside if they want to download the payload based on the stamp
  // value.
  uint64 payload_size = 11;
  // The serialized and encrypted payload covered by the HMAC.
  // This field may be stripped by a relay server if it is large. In which
  // case it will be made available at the payloads endpoint via the digest.
  // If the ciphertext is not set, the payload digest becomes a mandatory field.
  bytes payload = 100;
}

// Collection of messages. Pushed from client to server via HTTP.
message MessageSet { repeated Message messages = 1; }

// A page of messages. Pulled from server via HTTP.
message MessagePage {
  repeated Message messages = 1;
  int64 start_time = 2;
  int64 end_time = 3;
  int64 start_digest = 4;
  int64 end_digest = 5;
}

// A page of payloads. Pulled from server via HTTP.
message PayloadPage {
  repeated bytes payloads = 1;
  int64 start_time = 2;
  int64 end_time = 3;
  int64 start_digest = 4;
  int64 end_digest = 5;
}
